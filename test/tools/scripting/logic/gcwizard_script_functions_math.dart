part of 'gcwizard_scipt_test.dart';

List<Map<String, Object?>> _inputsMathToExpected = [
  // {'code' : 'print 2 * 3', 'expectedOutput' : '6.0'},
  // {'code' : 'print 3 - 1', 'expectedOutput' : '2.0'},
  // {'code' : 'print 6 / 3', 'expectedOutput' : '2.0'},
  // {'code' : 'print 2 + 3', 'expectedOutput' : '5.0'},
  // {'code' : 'print 2.0 * 3', 'expectedOutput' : '6.0'},
  //
  // {'code' : 'print MOD(11, 3)', 'expectedOutput' : '2.0'},
  // {'code' : 'print MOD(11.0, 3)', 'expectedOutput' : '2.0'},
  // {'code' : 'print MOD(11.0, 3.0)', 'expectedOutput' : '2.0'},
  // {'code' : 'print MOD(11, 3.0)', 'expectedOutput' : '2.0'},
  // {'code' : 'print MOD(X, 3)', 'expectedOutput' : '0', 'error': 'gcwizard_script_casting_error'},
  // {'code' : 'print MOD(11, X)', 'expectedOutput' : '0', 'error': 'gcwizard_script_casting_error'},
  // {'code' : 'print MOD(, X)', 'expectedOutput' : '0', 'error': 'gcwizard_script_casting_error'},
  // {'code' : 'print MOD(11, )', 'expectedOutput' : '0', 'error': 'gcwizard_script_casting_error'},
  // {'code' : 'print MOD(11)', 'expectedOutput' : '0', 'error': 'gcwizard_script_casting_error'},
  // {'code' : 'print MOD(11, 0)', 'expectedOutput' : '0', 'error': 'gcwizard_script_division_by_zero'},
  // {'code' : 'print MOD(11, 3, 2)', 'expectedOutput' : '0.0', 'error': 'gcwizard_script_casting_error'},

  // {'code' : 'print SGN(11)', 'expectedOutput' : '1'},
  // {'code' : 'print SGN(11.0)', 'expectedOutput' : '1'},
  // {'code' : 'print SGN(-11)', 'expectedOutput' : '-1'},
  // {'code' : 'print SGN(0)', 'expectedOutput' : '0'},
  // {'code' : 'print SGN(-0)', 'expectedOutput' : '0', 'error': 'gcwizard_script_division_by_zero'},
  // {'code' : 'print SGN(X)', 'expectedOutput' : '0', 'error': 'gcwizard_script_casting_error'},
  // {'code' : 'print SGN( )', 'expectedOutput' : '0', 'error': 'gcwizard_script_casting_error'},
  // {'code' : 'print SGN(11, 2, 1)', 'expectedOutput' : '0.0', 'error': 'gcwizard_script_casting_error'},
  //
  // {'code' : 'print PI()', 'expectedOutput' : '3.141592653589793'},
  // {'code' : 'print PI', 'expectedOutput' : 'dynamic'},
  // {'code' : 'print PI(x)', 'expectedOutput' : '3.141592653589793'},

  // {'code' : 'print TRUNC(3)', 'expectedOutput' : '3'},
  // {'code' : 'print TRUNC(3.6)', 'expectedOutput' : '3'},
  // {'code' : 'print TRUNC(-2)', 'expectedOutput' : '-2'},
  // {'code' : 'print TRUNC(-2.6)', 'expectedOutput' : '-2'},
  // {'code' : 'print TRUNC(-2.6, 5)', 'expectedOutput' : '0.0', 'error': 'gcwizard_script_syntax_error'},
  // {'code' : 'print TRUNC( )', 'expectedOutput' : '0', 'error': 'gcwizard_script_casting_error'},
  // {'code' : 'print TRUNC(X)', 'expectedOutput' : '0', 'error': 'gcwizard_script_casting_error'},

  // {'code' : 'print GGT(12, 3)', 'expectedOutput' : '3'},
  // {'code' : 'print GGT(12.6, 3)', 'expectedOutput' : '3'},
  // {'code' : 'print GGT(11, 3)', 'expectedOutput' : '1'},
  // {'code' : 'print GGT(3, 11)', 'expectedOutput' : '1'},
  // {'code' : 'print GGT(12.0, 3)', 'expectedOutput' : '3'},
  // {'code' : 'print GGT(12.0, 3.0)', 'expectedOutput' : '3'},
  // {'code' : 'print GGT(0, 3)', 'expectedOutput' : '3'},
  // {'code' : 'print GGT(12, 0)', 'expectedOutput' : '12'},
  // {'code' : 'print GGT( )', 'expectedOutput' : '0', 'error': 'gcwizard_script_casting_error'},
  // {'code' : 'print GGT(3 )', 'expectedOutput' : '0', 'error': 'gcwizard_script_casting_error'},
  // {'code' : 'print GGT(X, 3)', 'expectedOutput' : '0', 'error': 'gcwizard_script_casting_error'},
  // {'code' : 'print GGT(11, X)', 'expectedOutput' : '0', 'error': 'gcwizard_script_casting_error'},
  // {'code' : 'print GGT(X, X)', 'expectedOutput' : '0', 'error': 'gcwizard_script_casting_error'},
  // {'code' : 'print GGT(11, )', 'expectedOutput' : '0', 'error': 'gcwizard_script_casting_error'},

  // {'code' : 'print KGV(12, 3)', 'expectedOutput' : '12.0'},
  // {'code' : 'print KGV(12.6, 3)', 'expectedOutput' : '12.6'},
  // {'code' : 'print KGV(11, 3)', 'expectedOutput' : '33.0'},
  // {'code' : 'print KGV(3, 11)', 'expectedOutput' : '33.0'},
  // {'code' : 'print KGV(12.0, 3)', 'expectedOutput' : '12.0'},
  // {'code' : 'print KGV(12.0, 3.0)', 'expectedOutput' : '12.0'},
  // {'code' : 'print KGV(0, 3)', 'expectedOutput' : '0.0'},
  // {'code' : 'print KGV(12, 0)', 'expectedOutput' : '0.0'},
  // {'code' : 'print KGV( )', 'expectedOutput' : '0', 'error': 'gcwizard_script_casting_error'},
  // {'code' : 'print KGV(3 )', 'expectedOutput' : '0', 'error': 'gcwizard_script_casting_error'},
  // {'code' : 'print KGV(X, 3)', 'expectedOutput' : '0', 'error': 'gcwizard_script_casting_error'},
  // {'code' : 'print KGV(11, X)', 'expectedOutput' : '0', 'error': 'gcwizard_script_casting_error'},
  // {'code' : 'print KGV(X, X)', 'expectedOutput' : '0', 'error': 'gcwizard_script_casting_error'},
  // {'code' : 'print KGV(11, )', 'expectedOutput' : '0', 'error': 'gcwizard_script_casting_error'},

  // {'code' : 'print FAC(3)', 'expectedOutput' : '6.0'},
  // {'code' : 'print FAC(3.6)', 'expectedOutput' : '6.0'},
  // {'code' : 'print FAC(-2)', 'expectedOutput' : '1.0'},
  // {'code' : 'print FAC(-2.6)', 'expectedOutput' : '1.0'},
  // {'code' : 'print FAC(-2.6, 5)', 'expectedOutput' : '0.0', 'error': 'gcwizard_script_syntax_error'},
  // {'code' : 'print FAC( )', 'expectedOutput' : '0.0', 'error': 'gcwizard_script_casting_error'},
  // {'code' : 'print FAC(X)', 'expectedOutput' : '0.0', 'error': 'gcwizard_script_casting_error'},

  // {'code' : 'print FRAC(3)', 'expectedOutput' : '0.0'},
  // {'code' : 'print FRAC(3.6)', 'expectedOutput' : '0.6000000000000001'},
  // {'code' : 'print FRAC(-2)', 'expectedOutput' : '0.0'},
  // {'code' : 'print FRAC(-2.6)', 'expectedOutput' : '-0.6000000000000001'},
  // {'code' : 'print FRAC(-2.6, 5)', 'expectedOutput' : '0.0', 'error': 'gcwizard_script_syntax_error'},
  // {'code' : 'print FRAC( )', 'expectedOutput' : '0', 'error': 'gcwizard_script_casting_error'},
  // {'code' : 'print FRAC(X)', 'expectedOutput' : '0', 'error': 'gcwizard_script_casting_error'},

  // {'code' : 'print SIN(0)', 'expectedOutput' : '0.0'},
  {'code' : 'print SIN(PI()/2)', 'expectedOutput' : '1.0'}, //ToDo problem
  // {'code' : 'print SIN(1.570796327)', 'expectedOutput' : '1.0'},
  // {'code' : 'print SIN(-2)', 'expectedOutput' : '-0.9092974268256817'},
  // {'code' : 'print SIN(-2.6)', 'expectedOutput' : '-0.5155013718214642'},
  // {'code' : 'print SIN(-2.6, 5)', 'expectedOutput' : '0.0', 'error': 'gcwizard_script_syntax_error'},
  // {'code' : 'print SIN( )', 'expectedOutput' : '0.0', 'error': 'gcwizard_script_casting_error'},
  // {'code' : 'print SIN(X)', 'expectedOutput' : '0.0', 'error': 'gcwizard_script_casting_error'},


  // 'SIN': _GCWizardScriptClassFunctionDefinition(_sin, 1),
  // 'COS': _GCWizardScriptClassFunctionDefinition(_cos, 1),
  // 'TAN': _GCWizardScriptClassFunctionDefinition(_tan, 1),
  // 'ATAN': _GCWizardScriptClassFunctionDefinition(_atan, 1),
  // 'EXP': _GCWizardScriptClassFunctionDefinition(_exp, 1),
  // 'LOG': _GCWizardScriptClassFunctionDefinition(_log10, 1),
  // 'LN': _GCWizardScriptClassFunctionDefinition(_ln, 1),
  // 'SQRT': _GCWizardScriptClassFunctionDefinition(_sqrt, 1),
  // 'SQR': _GCWizardScriptClassFunctionDefinition(_sqr, 1),
  // 'DEG': _GCWizardScriptClassFunctionDefinition(_deg, 1),
  // 'RAD': _GCWizardScriptClassFunctionDefinition(_rad, 1),
  // 'RND': _GCWizardScriptClassFunctionDefinition(_rnd, 1),
  // 'CEIL': _GCWizardScriptClassFunctionDefinition(_ceil, 1),
  // 'FLOOR': _GCWizardScriptClassFunctionDefinition(_floor, 1),
  // 'ASIN': _GCWizardScriptClassFunctionDefinition(_asin, 1),
  // 'ACOS': _GCWizardScriptClassFunctionDefinition(_acos, 1),
  // 'ABS': _GCWizardScriptClassFunctionDefinition(_abs, 1),
  // 'POW': _GCWizardScriptClassFunctionDefinition(_pow, 2),
  // 'QSUM': _GCWizardScriptClassFunctionDefinition(_qsum, 1),
  // 'IQSUM': _GCWizardScriptClassFunctionDefinition(_iqsum, 1),
  // 'CONVERT': _GCWizardScriptClassFunctionDefinition(_convert, 4),
];