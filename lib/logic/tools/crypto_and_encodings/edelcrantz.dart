import 'package:gc_wizard/utils/common_utils.dart';

final CODEBOOK = {
  '000' : ' ',
  '001' : '1',
  '002' : '2',
  '003' : 'A',
  '004' : '3',
  '005' : 'ab',
  '006' : 'ad',
  '007' : '<ORDFLUT>',
  '010' : '4',
  '011' : 'af',
  '012' : 'ak',
  '013' : 'al',
  '014' : 'alt',
  '015' : 'am',
  '016' : 'an',
  '017' : 'and',
  '020' : '5',
  '021' : 'ap',
  '022' : 'ar',
  '023' : 'arm',
  '024' : 'as',
  '025' : 'at',
  '026' : 'B',
  '027' : 'ba',
  '030' : 'bak',
  '031' : 'bar',
  '032' : 'be',
  '033' : 'beg',
  '034' : 'berg',
  '035' : 'bi',
  '036' : 'bl',
  '037' : 'bland',
  '040' : '6',
  '041' : 'bo',
  '042' : 'bon',
  '043' : 'bor',
  '044' : 'br',
  '045' : 'bref',
  '046' : 'bu',
  '047' : 'by',
  '050' : 'bå',
  '051' : 'bart',
  '052' : 'bä',
  '053' : 'bö',
  '054' : 'bör',
  '055' : 'D',
  '056' : 'da',
  '057' : 'dag',
  '060' : 'dan',
  '061' : 'danfk',
  '062' : 'de',
  '063' : 'del',
  '064' : 'dem',
  '065' : 'den',
  '066' : 'der',
  '067' : 'det',
  '070' : '.',
  '071' : 'di',
  '072' : 'dig',
  '073' : 'din',
  '074' : 'dit',
  '075' : 'do',
  '076' : 'dom',
  '077' : '<FORT>',
  '100' : '7',
  '101' : 'dr',
  '102' : 'dt',
  '103' : 'du',
  '104' : 'dy',
  '105' : 'då',
  '106' : 'dä',
  '107' : 'där',
  '110' : 'dö',
  '111' : 'död',
  '112' : 'E',
  '113' : 'ed',
  '114' : 'efter',
  '115' : 'el',
  '116' : 'eller',
  '117' : 'eld',
  '120' : 'em',
  '121' : 'en',
  '122' : 'er',
  '123' : 'es',
  '124' : 'et',
  '125' : 'F',
  '126' : '',
  '127' : '',
  '130' : '',
  '131' : '',
  '132' : '',
  '133' : '',
  '134' : '',
  '135' : '',
  '136' : '',
  '137' : '',
  '140' : '',
  '141' : '',
  '142' : '',
  '143' : '',
  '144' : '',
  '145' : '',
  '146' : '',
  '147' : '',
  '150' : '',
  '151' : '',
  '152' : '',
  '153' : '',
  '154' : '',
  '155' : '',
  '156' : '',
  '157' : '',
  '160' : '',
  '161' : '',
  '162' : 'G',
  '163' : '',
  '164' : '',
  '165' : '',
  '166' : '',
  '167' : '',
  '170' : '',
  '171' : '',
  '172' : '',
  '173' : '',
  '174' : '',
  '175' : '',
  '176' : '',
  '177' : '',
  '200' : '8',
  '201' : 'gu',
  '202' : 'gul',
  '203' : 'gå',
  '204' : 'går',
  '205' : 'gä',
  '206' : 'gö',
  '207' : 'gör',
  '210' : 'H',
  '211' : 'ha',
  '212' : 'haf',
  '213' : 'hal',
  '214' : 'hamm',
  '215' : 'han',
  '216' : 'hand',
  '217' : 'har',
  '220' : '',
  '221' : '',
  '222' : '',
  '223' : '',
  '224' : '',
  '225' : '',
  '226' : '',
  '227' : '',
  '230' : '',
  '231' : '',
  '232' : '',
  '233' : '',
  '234' : '',
  '235' : '',
  '236' : '00',
  '237' : '',
  '240' : '',
  '241' : '',
  '242' : '',
  '243' : '',
  '244' : '',
  '245' : '',
  '246' : '',
  '247' : '',
  '250' : '',
  '251' : '',
  '252' : '',
  '253' : '',
  '254' : 'I',
  '255' : '',
  '256' : '',
  '257' : '',
  '260' : '',
  '261' : '',
  '262' : '',
  '263' : '',
  '264' : '',
  '265' : '',
  '266' : '',
  '267' : '',
  '270' : '',
  '271' : '',
  '272' : '',
  '273' : '',
  '274' : 'K',
  '275' : '',
  '276' : '',
  '277' : '',
  '300' : 'kan',
  '301' : 'kar',
  '302' : 'ke',
  '303' : 'ki',
  '304' : 'kl',
  '305' : 'kla',
  '306' : 'kn',
  '307' : 'kna',
  '310' : 'ko',
  '311' : 'kom',
  '312' : 'kon',
  '313' : 'kor',
  '314' : 'kr',
  '315' : 'kra',
  '316' : 'ku',
  '317' : 'kv',
  '320' : '',
  '321' : '',
  '322' : '',
  '323' : '',
  '324' : '',
  '325' : 'L',
  '326' : '',
  '327' : '',
  '330' : '',
  '331' : '',
  '332' : '',
  '333' : '',
  '334' : '',
  '335' : '',
  '336' : '',
  '337' : '',
  '340' : '',
  '341' : '',
  '342' : '',
  '343' : '',
  '344' : '',
  '345' : '',
  '346' : '',
  '347' : '',
  '350' : '',
  '351' : '',
  '352' : '',
  '353' : '',
  '354' : '',
  '355' : '',
  '356' : '',
  '357' : '',
  '360' : '',
  '361' : '',
  '362' : 'M',
  '363' : '',
  '364' : '',
  '365' : '',
  '366' : '',
  '367' : '',
  '370' : '',
  '371' : '',
  '372' : '',
  '373' : '',
  '374' : '',
  '375' : '',
  '376' : '',
  '377' : '',
  '400' : '9',
  '401' : '',
  '402' : '',
  '403' : '',
  '404' : '',
  '405' : '',
  '406' : '',
  '407' : '',
  '410' : '',
  '411' : '',
  '412' : '',
  '413' : '',
  '414' : '',
  '415' : '',
  '416' : '',
  '417' : '',
  '420' : '',
  '421' : '',
  '422' : 'N',
  '423' : '',
  '424' : '',
  '425' : '',
  '426' : '',
  '427' : '',
  '430' : '',
  '431' : '',
  '432' : '',
  '433' : '',
  '434' : '',
  '435' : '',
  '436' : '',
  '437' : '',
  '440' : '',
  '441' : '',
  '442' : '',
  '443' : '',
  '444' : '',
  '445' : '',
  '446' : '',
  '447' : '',
  '450' : 'O',
  '451' : '',
  '452' : '',
  '453' : '',
  '454' : '',
  '455' : '',
  '456' : '',
  '457' : '',
  '460' : '',
  '461' : '',
  '462' : 'P',
  '463' : '',
  '464' : '',
  '465' : '',
  '466' : '',
  '467' : '',
  '470' : '',
  '471' : '',
  '472' : '',
  '473' : '',
  '474' : '',
  '475' : '',
  '476' : '',
  '477' : '',
  '500' : 'R',
  '501' : '',
  '502' : '',
  '503' : '',
  '504' : '',
  '505' : '',
  '506' : '',
  '507' : '',
  '510' : '',
  '511' : '',
  '512' : '',
  '513' : '',
  '514' : '',
  '515' : '',
  '516' : '',
  '517' : '',
  '520' : '',
  '521' : '',
  '522' : '',
  '523' : '',
  '524' : '',
  '525' : '',
  '526' : '',
  '527' : '',
  '530' : 'S',
  '531' : '',
  '532' : '',
  '533' : '',
  '534' : '',
  '535' : '',
  '536' : '',
  '537' : '',
  '540' : '',
  '541' : '',
  '542' : '',
  '543' : '',
  '544' : '',
  '545' : '',
  '546' : '',
  '547' : '',
  '550' : '',
  '551' : '',
  '552' : '',
  '553' : '',
  '554' : '',
  '555' : '',
  '556' : '',
  '557' : '',
  '560' : '',
  '561' : '',
  '562' : '',
  '563' : '',
  '564' : '',
  '565' : '',
  '566' : '',
  '567' : '',
  '570' : '',
  '571' : '',
  '572' : '',
  '573' : '',
  '574' : '',
  '575' : '',
  '576' : '',
  '577' : '',
  '600' : '',
  '601' : '',
  '602' : '',
  '603' : '',
  '604' : '',
  '605' : '',
  '606' : '',
  '607' : '',
  '610' : '',
  '611' : '',
  '612' : '',
  '613' : '',
  '614' : '',
  '615' : '',
  '616' : '',
  '617' : '',
  '620' : 'T',
  '621' : '',
  '622' : '',
  '623' : '',
  '624' : '',
  '625' : '',
  '626' : '',
  '627' : '',
  '630' : '',
  '631' : '000',
  '632' : '',
  '633' : '',
  '634' : '',
  '635' : '',
  '636' : '',
  '637' : '',
  '640' : 'U',
  '641' : '',
  '642' : '',
  '643' : '',
  '644' : '',
  '645' : '',
  '646' : '',
  '647' : '',
  '650' : 'V',
  '651' : '',
  '652' : '',
  '653' : '',
  '654' : '',
  '655' : '',
  '656' : '',
  '657' : '',
  '660' : '',
  '661' : '',
  '662' : '',
  '663' : '',
  '664' : '',
  '665' : '',
  '666' : '',
  '667' : '',
  '670' : '',
  '671' : '',
  '672' : '',
  '673' : '',
  '674' : '',
  '675' : '',
  '676' : '',
  '677' : '',
  '700' : '',
  '701' : '',
  '702' : '',
  '703' : '',
  '704' : '',
  '705' : '',
  '706' : '',
  '707' : '',
  '710' : 'X',
  '711' : 'Y',
  '712' : 'Z',
  '713' : 'Å',
  '714' : '',
  '715' : '',
  '716' : '',
  '717' : '',
  '720' : '',
  '721' : '',
  '722' : '',
  '723' : 'Ä',
  '724' : '',
  '725' : '',
  '726' : '',
  '727' : '',
  '730' : '',
  '731' : '',
  '732' : '',
  '733' : '',
  '734' : '',
  '735' : '',
  '736' : '',
  '737' : 'Ö',
  '740' : '',
  '741' : '',
  '742' : '',
  '743' : '',
  '744' : '',
  '745' : '',
  '746' : '',
  '747' : '',
  '750' : '',
  '751' : '',
  '752' : '',
  '753' : '',
  '754' : '',
  '755' : '',
  '756' : '',
  '757' : '',
  '760' : '',
  '761' : '',
  '762' : '',
  '763' : '',
  '764' : '',
  '765' : '',
  '766' : '',
  '767' : '',
  '770' : '',
  '771' : '',
  '772' : '',
  '773' : '',
  '774' : '',
  '775' : '',
  '776' : '',
  '777' : '',
};


List<List<String>> encodeEdelcrantz(String input) {
  if (input == null || input == '') return <List<String>>[];

  return input.split('').map((letter) {
    if (switchMapKeyValue(CODEBOOK)[letter] != null)
      return switchMapKeyValue(CODEBOOK)[letter].split('');
  }).toList();
}


Map<String, dynamic> decodeVisualEdelcrantz(List<String> inputs) {
  if (inputs == null || inputs.length == 0)
    return {
      'displays': <List<String>>[],
      'text': '',
    };

  var displays = <List<String>>[];
  var segment = <String>[];
  String text = '';

  inputs.forEach((element) {
    segment = _stringToSegment(element);
    displays.add(segment);
    text = text + CODEBOOK[segmentToCode(segment)];
  });

  return {'displays': displays, 'text': text};
}


Map<String, dynamic> decodeTextEdelcrantz(String inputs) {
  if (inputs == null || inputs.length == 0)
    return {
      'displays': <List<String>>[],
      'text': '',
    };

  var displays = <List<String>>[];
  String text = '';

  inputs.split(' ').forEach((element) {
    if (CODEBOOK[element] != null) {
      text = text + CODEBOOK[element];
      displays.add(_buildShutters(element));
    }
  });
  return {'displays': displays, 'text': text};
}


List<String> _stringToSegment(String input){
  List<String> result = [];
  int j = 0;
  for (int i = 0; i < input.length /2; i++) {
    result.add(input[j] + input[j + 1]);
    j = j + 2;
  }
  return result;
}

String segmentToCode(List<String> segment){
  int a = 0;
  int b = 0;
  int c = 0;

  if (segment.contains('a1')) a = a + 1;
  if (segment.contains('a2')) a = a + 2;
  if (segment.contains('a3')) a = a + 4;
  if (segment.contains('b1')) b = b + 1;
  if (segment.contains('b2')) b = b + 2;
  if (segment.contains('b3')) b = b + 4;
  if (segment.contains('c1')) c = c + 1;
  if (segment.contains('c2')) c = c + 2;
  if (segment.contains('c3')) c = c + 4;
  return a.toString() + b.toString() + c.toString();
}


List<String> _buildShutters(String segments){

  List<String> resultElement = [];
  switch (segments[0]) {
    case '0' : resultElement = []; break;
    case '1' : resultElement = ['a1']; break;
    case '2' : resultElement = ['a2']; break;
    case '3' : resultElement = ['a1', 'a2']; break;
    case '4' : resultElement = ['a3']; break;
    case '5' : resultElement = ['a3', 'a1']; break;
    case '6' : resultElement = ['a3', 'a2']; break;
    case '7' : resultElement = ['a3', 'a2', 'a1']; break;
  }
  switch (segments[1]) {
    case '1' : resultElement.addAll(['b1']); break;
    case '2' : resultElement.addAll(['b2']); break;
    case '3' : resultElement.addAll(['b1', 'b2']); break;
    case '4' : resultElement.addAll(['b3']); break;
    case '5' : resultElement.addAll(['b3', 'b1']); break;
    case '6' : resultElement.addAll(['b3', 'b2']); break;
    case '7' : resultElement.addAll(['b3', 'b2', 'b1']); break;
  }
  switch (segments[2]) {
    case '1' : resultElement.addAll(['c1']); break;
    case '2' : resultElement.addAll(['c2']); break;
    case '3' : resultElement.addAll(['c1', 'c2']); break;
    case '4' : resultElement.addAll(['c3']); break;
    case '5' : resultElement.addAll(['c3', 'c1']); break;
    case '6' : resultElement.addAll(['c3', 'c2']); break;
    case '7' : resultElement.addAll(['c3', 'c2', 'c1']); break;
  }

  return resultElement;
}
